gps$CPUDATEANDTIME = do.call(rbind,strsplit(gps$CPUDATEANDTIME, "\\."))[,1]
gps$Ya = substr(gps$Y,1,2)
gps$Yb = substr(gps$Y, 3, nchar(gps$Y))
gps$Xa = substr(gps$X,1,3)
gps$Xb = substr(gps$X, 4, nchar(gps$X))
gps$Y = paste(gps$Ya," ",gps$Yb)
gps$X = paste(gps$Xa," ",gps$Xb)
## drop GPGGA rows unless no GPRMC data exists for that second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keepall = ifelse(all(Speed %in% NA) & all(Heading %in% NA), "yes","no")
) %>% ungroup()
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keep = ifelse((keepall %in% "no" & Speed %in% NA & Heading %in% NA),
"no", "yes")) %>% ungroup()
gps <- gps %>% filter(keep %in% "yes")
gps <- gps %>% select(-Date, -keepall, -keep)
###test for multiple gps recordings in a second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(ngps=length(CPUDATEANDTIME)) %>% ungroup()
## keep only first row of a second where this is true
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(keep.first = ifelse((ngps>1 & row_number()==1), "yes",
ifelse((ngps>1 & row_number()>1),"no","yes")))
gps <- gps %>% filter(keep.first %in% "yes")
#### sensors prep
sensors <- sensors %>% mutate(Date = sub("00","20",Date))
sensors <- sensors %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU_Time))
sensors$CPUDATEANDTIME = do.call(rbind,strsplit(sensors$CPUDATEANDTIME, "\\."))[,1]
sensors$CPU_Time = do.call(rbind,strsplit(sensors$CPU_Time, "\\."))[,1]
###### join tables by time
x <- full_join(gps, sensors)
#### finishing touches
x <- x %>% select(GPS.Time,Y,X,Speed,Heading,Set_no,CPUDATEANDTIME,Date,Info2,Measure,Validity,X2,Info3) %>%
rename(GPSTIME = GPS.Time, GPSDATE = Date, LATITUDE =Y, LONGITUDE = X, VALIDITY = Validity, TRANSDUCERNAME = Info2,
SENSORNAME = Measure, SENSORVALUE = X2, HYDROPHONE = Info3, SET_NO = Set_no, SPEED = Speed, HEADING = Heading) %>%
mutate(ERRORCODE = NA, SIGNALSTRENGTH = NA, TRIP_ID = NA)
#x <- x %>% mutate(VALIDITY = ifelse(VALIDITY >=1000 & VALIDITY < 1010, "Raw", ifelse(VALIDITY >= 1010 & VALIDITY <= 1011,"Filtered",
#                                                                              ifelse(VALIDITY ==1001,"Rejected", VALIDITY))))
x <- x %>% mutate(LATITUDE = as.character(LATITUDE), LONGITUDE = as.character(LONGITUDE))
x <- x %>% mutate(GPSDATE =ifelse(GPSDATE %in% NA,as.character(date(as_datetime(CPUDATEANDTIME))),GPSDATE))
x <- x[c("CPUDATEANDTIME",
"GPSTIME",
"LATITUDE",
"LONGITUDE",
"SPEED",
"HEADING",
"VALIDITY",
"TRANSDUCERNAME",
"SENSORNAME",
"SENSORVALUE",
"ERRORCODE",
"HYDROPHONE",
"SIGNALSTRENGTH",
"SET_NO",
"TRIP_ID",
"GPSDATE")]
View(x)
##### output is to survey/year/marport2esonar folder
write.csv(x, file = file.path(fpath,year,"marport2esonar",paste0(year,".csv")), row.names = F)
####### this script converts the marport data tables produced by ILTSMarportSummary.r into Esonar format
######  NOTE: in rare cases tables will have two GPS rows for the same CPUDATEANDTIME second (because GPS records by GPSTIME)
######        in such cases, sensor reading values will also be duplicated to match these rows.
#####         Therefore, if doing statistical analysis using CPUDATEANDTIME, be sure to filter out duplicate sensor rows to avoid artificially inflating data.
require(bio.lobster)
require(bio.utilities)
library(plyr)
library(dplyr)
library(tibble)
library(tidyr)
library(stringi)
library(lubridate)
########## change year or directories if applicable
fpath <- file.path(project.datadirectory('bio.lobster'),'data','survey')
year= 2015
load(file.path(fpath,paste0('marport.',year,'.rdata')))
load(file.path(fpath,paste0('marport.gps.',year,'.rdata')))
#### gps prep
gps <- gps %>% mutate(Date = sub("00","20",Date))
gps <- gps %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU.Time))
gps$CPUDATEANDTIME = do.call(rbind,strsplit(gps$CPUDATEANDTIME, "\\."))[,1]
gps$Ya = substr(gps$Y,1,2)
gps$Yb = substr(gps$Y, 3, nchar(gps$Y))
gps$Xa = substr(gps$X,1,3)
gps$Xb = substr(gps$X, 4, nchar(gps$X))
gps$Y = paste(gps$Ya," ",gps$Yb)
gps$X = paste(gps$Xa," ",gps$Xb)
## drop GPGGA rows unless no GPRMC data exists for that second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keepall = ifelse(all(Speed %in% NA) & all(Heading %in% NA), "yes","no")
) %>% ungroup()
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keep = ifelse((keepall %in% "no" & Speed %in% NA & Heading %in% NA),
"no", "yes")) %>% ungroup()
gps <- gps %>% filter(keep %in% "yes")
gps <- gps %>% select(-Date, -keepall, -keep)
###test for multiple gps recordings in a second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(ngps=length(CPUDATEANDTIME)) %>% ungroup()
## keep only first row of a second where this is true
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(keep.first = ifelse((ngps>1 & row_number()==1), "yes",
ifelse((ngps>1 & row_number()>1),"no","yes")))
gps <- gps %>% filter(keep.first %in% "yes")
#### sensors prep
sensors <- sensors %>% mutate(Date = sub("00","20",Date))
sensors <- sensors %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU_Time))
sensors$CPUDATEANDTIME = do.call(rbind,strsplit(sensors$CPUDATEANDTIME, "\\."))[,1]
sensors$CPU_Time = do.call(rbind,strsplit(sensors$CPU_Time, "\\."))[,1]
###### join tables by time
x <- full_join(gps, sensors)
#### finishing touches
x <- x %>% select(GPS.Time,Y,X,Speed,Heading,Set_no,CPUDATEANDTIME,Date,Info2,Measure,Validity,X2,Info3) %>%
rename(GPSTIME = GPS.Time, GPSDATE = Date, LATITUDE =Y, LONGITUDE = X, VALIDITY = Validity, TRANSDUCERNAME = Info2,
SENSORNAME = Measure, SENSORVALUE = X2, HYDROPHONE = Info3, SET_NO = Set_no, SPEED = Speed, HEADING = Heading) %>%
mutate(ERRORCODE = NA, SIGNALSTRENGTH = NA, TRIP_ID = NA)
#x <- x %>% mutate(VALIDITY = ifelse(VALIDITY >=1000 & VALIDITY < 1010, "Raw", ifelse(VALIDITY >= 1010 & VALIDITY <= 1011,"Filtered",
#                                                                              ifelse(VALIDITY ==1001,"Rejected", VALIDITY))))
x <- x %>% mutate(LATITUDE = as.character(LATITUDE), LONGITUDE = as.character(LONGITUDE))
x <- x %>% mutate(GPSDATE =ifelse(GPSDATE %in% NA,as.character(date(as_datetime(CPUDATEANDTIME))),GPSDATE))
x <- x[c("CPUDATEANDTIME",
"GPSTIME",
"LATITUDE",
"LONGITUDE",
"SPEED",
"HEADING",
"VALIDITY",
"TRANSDUCERNAME",
"SENSORNAME",
"SENSORVALUE",
"ERRORCODE",
"HYDROPHONE",
"SIGNALSTRENGTH",
"SET_NO",
"TRIP_ID",
"GPSDATE")]
View(x)
##### output is to survey/year/marport2esonar folder
write.csv(x, file = file.path(fpath,year,"marport2esonar",paste0(year,".csv")), row.names = F)
library(tidyr)
detach("package:tidyr", unload = TRUE)
library(plyr)
library(dplyr)
library(stringi)
library(lubridate)
########## change year or directories if applicable
fpath <- file.path(project.datadirectory('bio.lobster'),'data','survey')
year= 2015
load(file.path(fpath,paste0('marport.',year,'.rdata')))
load(file.path(fpath,paste0('marport.gps.',year,'.rdata')))
#### gps prep
gps <- gps %>% mutate(Date = sub("00","20",Date))
gps <- gps %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU.Time))
gps$CPUDATEANDTIME = do.call(rbind,strsplit(gps$CPUDATEANDTIME, "\\."))[,1]
gps$Ya = substr(gps$Y,1,2)
gps$Yb = substr(gps$Y, 3, nchar(gps$Y))
gps$Xa = substr(gps$X,1,3)
gps$Xb = substr(gps$X, 4, nchar(gps$X))
gps$Y = paste(gps$Ya," ",gps$Yb)
gps$X = paste(gps$Xa," ",gps$Xb)
## drop GPGGA rows unless no GPRMC data exists for that second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keepall = ifelse(all(Speed %in% NA) & all(Heading %in% NA), "yes","no")
) %>% ungroup()
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keep = ifelse((keepall %in% "no" & Speed %in% NA & Heading %in% NA),
"no", "yes")) %>% ungroup()
gps <- gps %>% filter(keep %in% "yes")
gps <- gps %>% select(-Date, -keepall, -keep)
###test for multiple gps recordings in a second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(ngps=length(CPUDATEANDTIME)) %>% ungroup()
## keep only first row of a second where this is true
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(keep.first = ifelse((ngps>1 & row_number()==1), "yes",
ifelse((ngps>1 & row_number()>1),"no","yes")))
gps <- gps %>% filter(keep.first %in% "yes")
#### sensors prep
sensors <- sensors %>% mutate(Date = sub("00","20",Date))
sensors <- sensors %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU_Time))
sensors$CPUDATEANDTIME = do.call(rbind,strsplit(sensors$CPUDATEANDTIME, "\\."))[,1]
sensors$CPU_Time = do.call(rbind,strsplit(sensors$CPU_Time, "\\."))[,1]
###### join tables by time
x <- full_join(gps, sensors)
#### finishing touches
x <- x %>% select(GPS.Time,Y,X,Speed,Heading,Set_no,CPUDATEANDTIME,Date,Info2,Measure,Validity,X2,Info3) %>%
rename(GPSTIME = GPS.Time, GPSDATE = Date, LATITUDE =Y, LONGITUDE = X, VALIDITY = Validity, TRANSDUCERNAME = Info2,
SENSORNAME = Measure, SENSORVALUE = X2, HYDROPHONE = Info3, SET_NO = Set_no, SPEED = Speed, HEADING = Heading) %>%
mutate(ERRORCODE = NA, SIGNALSTRENGTH = NA, TRIP_ID = NA)
#x <- x %>% mutate(VALIDITY = ifelse(VALIDITY >=1000 & VALIDITY < 1010, "Raw", ifelse(VALIDITY >= 1010 & VALIDITY <= 1011,"Filtered",
#                                                                              ifelse(VALIDITY ==1001,"Rejected", VALIDITY))))
x <- x %>% mutate(LATITUDE = as.character(LATITUDE), LONGITUDE = as.character(LONGITUDE))
x <- x %>% mutate(GPSDATE =ifelse(GPSDATE %in% NA,as.character(date(as_datetime(CPUDATEANDTIME))),GPSDATE))
x <- x[c("CPUDATEANDTIME",
"GPSTIME",
"LATITUDE",
"LONGITUDE",
"SPEED",
"HEADING",
"VALIDITY",
"TRANSDUCERNAME",
"SENSORNAME",
"SENSORVALUE",
"ERRORCODE",
"HYDROPHONE",
"SIGNALSTRENGTH",
"SET_NO",
"TRIP_ID",
"GPSDATE")]
require(bio.lobster)
library(plyr)
library(dplyr)
library(stringi)
library(lubridate)
########## change year or directories if applicable
fpath <- file.path(project.datadirectory('bio.lobster'),'data','survey')
year= 2015
load(file.path(fpath,paste0('marport.',year,'.rdata')))
load(file.path(fpath,paste0('marport.gps.',year,'.rdata')))
#### gps prep
gps <- gps %>% mutate(Date = sub("00","20",Date))
gps <- gps %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU.Time))
gps$CPUDATEANDTIME = do.call(rbind,strsplit(gps$CPUDATEANDTIME, "\\."))[,1]
gps$Ya = substr(gps$Y,1,2)
gps$Yb = substr(gps$Y, 3, nchar(gps$Y))
gps$Xa = substr(gps$X,1,3)
gps$Xb = substr(gps$X, 4, nchar(gps$X))
gps$Y = paste(gps$Ya," ",gps$Yb)
gps$X = paste(gps$Xa," ",gps$Xb)
## drop GPGGA rows unless no GPRMC data exists for that second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keepall = ifelse(all(Speed %in% NA) & all(Heading %in% NA), "yes","no")
) %>% ungroup()
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keep = ifelse((keepall %in% "no" & Speed %in% NA & Heading %in% NA),
"no", "yes")) %>% ungroup()
gps <- gps %>% filter(keep %in% "yes")
gps <- gps %>% select(-Date, -keepall, -keep)
###test for multiple gps recordings in a second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(ngps=length(CPUDATEANDTIME)) %>% ungroup()
## keep only first row of a second where this is true
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(keep.first = ifelse((ngps>1 & row_number()==1), "yes",
ifelse((ngps>1 & row_number()>1),"no","yes")))
gps <- gps %>% filter(keep.first %in% "yes")
#### sensors prep
sensors <- sensors %>% mutate(Date = sub("00","20",Date))
sensors <- sensors %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU_Time))
sensors$CPUDATEANDTIME = do.call(rbind,strsplit(sensors$CPUDATEANDTIME, "\\."))[,1]
sensors$CPU_Time = do.call(rbind,strsplit(sensors$CPU_Time, "\\."))[,1]
###### join tables by time
x <- full_join(gps, sensors)
#### finishing touches
x <- x %>% select(GPS.Time,Y,X,Speed,Heading,Set_no,CPUDATEANDTIME,Date,Info2,Measure,Validity,X2,Info3) %>%
rename(GPSTIME = GPS.Time, GPSDATE = Date, LATITUDE =Y, LONGITUDE = X, VALIDITY = Validity, TRANSDUCERNAME = Info2,
SENSORNAME = Measure, SENSORVALUE = X2, HYDROPHONE = Info3, SET_NO = Set_no, SPEED = Speed, HEADING = Heading) %>%
mutate(ERRORCODE = NA, SIGNALSTRENGTH = NA, TRIP_ID = NA)
#x <- x %>% mutate(VALIDITY = ifelse(VALIDITY >=1000 & VALIDITY < 1010, "Raw", ifelse(VALIDITY >= 1010 & VALIDITY <= 1011,"Filtered",
#                                                                              ifelse(VALIDITY ==1001,"Rejected", VALIDITY))))
x <- x %>% mutate(LATITUDE = as.character(LATITUDE), LONGITUDE = as.character(LONGITUDE))
x <- x %>% mutate(GPSDATE =ifelse(GPSDATE %in% NA,as.character(date(as_datetime(CPUDATEANDTIME))),GPSDATE))
x <- x[c("CPUDATEANDTIME",
"GPSTIME",
"LATITUDE",
"LONGITUDE",
"SPEED",
"HEADING",
"VALIDITY",
"TRANSDUCERNAME",
"SENSORNAME",
"SENSORVALUE",
"ERRORCODE",
"HYDROPHONE",
"SIGNALSTRENGTH",
"SET_NO",
"TRIP_ID",
"GPSDATE")]
?LobsterMarport
source('C:/bio/ILTS.sensor/R/marport2esonar.R')
?marport2esonar
View(x)
marport2esonar()
fpath = file.path("C:","bio.data",'bio.lobster','data','survey')
fpath
##### choose year of marport data to be summarized here. Adjust file paths if folder structure has changed.:
year = 2016
marport2esonar()
#### this script reads the marport text files, extracts useful data and converts this into a workable dataframe.
#### For converting this ouput to Esonar format, use the Marport2Esonar script.
options(stringsAsFactors=F)
require(bio.lobster)
require(bio.utilities)
require(devtools)
load_all(file.path(code_root,"bio.lobster"))
fpath = file.path(project.datadirectory('bio.lobster'),'data','survey')
##### choose year of marport data to be summarized here. Adjust file paths if folder structure has changed.:
year = 2016
marport2esonar()
source('C:/bio/ILTS.sensor/R/marport2esonar.R')
marport2esonar()
fpath = file.path("C:","bio.data",'bio.lobster','data','survey')
library(plyr)
library(dplyr)
library(stringi)
library(lubridate)
load(file.path(fpath,paste0('marport.',year,'.rdata')))
load(file.path(fpath,paste0('marport.gps.',year,'.rdata')))
source('C:/bio/ILTS.sensor/R/marport2esonar.R')
marport2esonar()
source('C:/bio/ILTS.sensor/R/marport2esonar.R')
marport2esonar()
source('C:/bio/ILTS.sensor/R/marport2esonar.R')
marport2esonar()
options(stringsAsFactors=F)
require(bio.lobster)
require(bio.utilities)
require(devtools)
load_all(file.path(code_root,"bio.lobster"))
fpath = file.path(project.datadirectory('bio.lobster'),'data','survey')
marport2esonar()
paste0('marport.',year,'.rdata')
fpath
file.path(fpath,paste0('marport.',year,'.rdata'))
year
#### this script reads the marport text files, extracts useful data and converts this into a workable dataframe.
#### For converting this ouput to Esonar format, use the Marport2Esonar script.
options(stringsAsFactors=F)
require(bio.lobster)
require(bio.utilities)
require(devtools)
load_all(file.path(code_root,"bio.lobster"))
fpath = file.path(project.datadirectory('bio.lobster'),'data','survey')
##### choose year of marport data to be summarized here. Adjust file paths if folder structure has changed.:
year = 2015
source('C:/bio/ILTS.sensor/R/marport2esonar.R')
year
fpath
marport2esonar()
load(file.path(fpath,paste0('marport.',year,'.rdata')))
load(file.path(fpath,paste0('marport.gps.',year,'.rdata')))
gps <- gps %>% mutate(Date = sub("00","20",Date))
gps <- gps %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU.Time))
gps$CPUDATEANDTIME = do.call(rbind,strsplit(gps$CPUDATEANDTIME, "\\."))[,1]
gps$Ya = substr(gps$Y,1,2)
gps$Yb = substr(gps$Y, 3, nchar(gps$Y))
gps$Xa = substr(gps$X,1,3)
gps$Xb = substr(gps$X, 4, nchar(gps$X))
gps$Y = paste(gps$Ya," ",gps$Yb)
gps$X = paste(gps$Xa," ",gps$Xb)
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keepall = ifelse(all(Speed %in% NA) & all(Heading %in% NA), "yes","no")
) %>% ungroup()
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keep = ifelse((keepall %in% "no" & Speed %in% NA & Heading %in% NA),
"no", "yes")) %>% ungroup()
gps <- gps %>% filter(keep %in% "yes")
gps <- gps %>% select(-Date, -keepall, -keep)
###test for multiple gps recordings in a second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(ngps=length(CPUDATEANDTIME)) %>% ungroup()
## keep only first row of a second where this is true
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(keep.first = ifelse((ngps>1 & row_number()==1), "yes",
ifelse((ngps>1 & row_number()>1),"no","yes")))
gps <- gps %>% filter(keep.first %in% "yes")
sensors <- sensors %>% mutate(Date = sub("00","20",Date))
sensors <- sensors %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU_Time))
sensors$CPUDATEANDTIME = do.call(rbind,strsplit(sensors$CPUDATEANDTIME, "\\."))[,1]
sensors$CPU_Time = do.call(rbind,strsplit(sensors$CPU_Time, "\\."))[,1]
x <- full_join(gps, sensors)
#### finishing touches
x <- x %>% select(GPS.Time,Y,X,Speed,Heading,Set_no,CPUDATEANDTIME,Date,Info2,Measure,Validity,X2,Info3) %>%
rename(GPSTIME = GPS.Time, GPSDATE = Date, LATITUDE =Y, LONGITUDE = X, VALIDITY = Validity, TRANSDUCERNAME = Info2,
SENSORNAME = Measure, SENSORVALUE = X2, HYDROPHONE = Info3, SET_NO = Set_no, SPEED = Speed, HEADING = Heading) %>%
mutate(ERRORCODE = NA, SIGNALSTRENGTH = NA, TRIP_ID = NA)
x <- x %>% mutate(LATITUDE = as.character(LATITUDE), LONGITUDE = as.character(LONGITUDE))
x <- x %>% mutate(GPSDATE =ifelse(GPSDATE %in% NA,as.character(date(as_datetime(CPUDATEANDTIME))),GPSDATE))
x <- x[c("CPUDATEANDTIME",
"GPSTIME",
"LATITUDE",
"LONGITUDE",
"SPEED",
"HEADING",
"VALIDITY",
"TRANSDUCERNAME",
"SENSORNAME",
"SENSORVALUE",
"ERRORCODE",
"HYDROPHONE",
"SIGNALSTRENGTH",
"SET_NO",
"TRIP_ID",
"GPSDATE")]
##### output is to survey/year/marport2esonar folder
out.dir = file.path(fpath,year,"marport2esonar")
marport2esonar(year=year)
source('C:/bio/ILTS.sensor/R/marport2esonar.R')
#### this script reads the marport text files, extracts useful data and converts this into a workable dataframe.
#### last line converts output to Esonar format.
options(stringsAsFactors=F)
require(bio.lobster)
require(ILTS.sensor)
require(bio.utilities)
require(devtools)
load_all(file.path(code_root,"ILTS.sensor"))
fpath = file.path(project.datadirectory('bio.lobster'),'data','survey')
##### choose year of marport data to be summarized here. Adjust file paths if folder structure has changed.:
year = 2015
if(year == 2015){marpath= file.path(fpath,'2015','marport')}
if(year == 2016){marpath= file.path(fpath,'ILTS_2016_Marport')}
fm = dir(marpath,full.names=T)
gps = list()
sensors = list()
m = 0
for(i in fm) {
print(i)
m = m+1
file = i
out = LobsterMarport(file=file)
gps[[m]] = out[[2]]
sensors[[m]] =  out[[1]]
}
marport2esonar(year=year)
fpath = file.path("C:","bio.data",'bio.lobster','data','survey')
library(plyr)
library(dplyr)
library(stringi)
library(lubridate)
########## change year or directories if applicable
load(file.path(fpath,paste0('marport.',year,'.rdata')))
load(file.path(fpath,paste0('marport.gps.',year,'.rdata')))
#### gps prep
gps <- gps %>% mutate(Date = sub("00","20",Date))
gps <- gps %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU.Time))
gps$CPUDATEANDTIME = do.call(rbind,strsplit(gps$CPUDATEANDTIME, "\\."))[,1]
gps$Ya = substr(gps$Y,1,2)
gps$Yb = substr(gps$Y, 3, nchar(gps$Y))
gps$Xa = substr(gps$X,1,3)
gps$Xb = substr(gps$X, 4, nchar(gps$X))
gps$Y = paste(gps$Ya," ",gps$Yb)
gps$X = paste(gps$Xa," ",gps$Xb)
## drop GPGGA rows unless no GPRMC data exists for that second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keepall = ifelse(all(Speed %in% NA) & all(Heading %in% NA), "yes","no")
) %>% ungroup()
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(
keep = ifelse((keepall %in% "no" & Speed %in% NA & Heading %in% NA),
"no", "yes")) %>% ungroup()
gps <- gps %>% filter(keep %in% "yes")
gps <- gps %>% select(-Date, -keepall, -keep)
###test for multiple gps recordings in a second
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(ngps=length(CPUDATEANDTIME)) %>% ungroup()
## keep only first row of a second where this is true
gps <- gps %>% group_by(CPUDATEANDTIME) %>% mutate(keep.first = ifelse((ngps>1 & row_number()==1), "yes",
ifelse((ngps>1 & row_number()>1),"no","yes")))
gps <- gps %>% filter(keep.first %in% "yes")
#### sensors prep
sensors <- sensors %>% mutate(Date = sub("00","20",Date))
sensors <- sensors %>% mutate(CPUDATEANDTIME =paste0(Date," ",CPU_Time))
sensors$CPUDATEANDTIME = do.call(rbind,strsplit(sensors$CPUDATEANDTIME, "\\."))[,1]
sensors$CPU_Time = do.call(rbind,strsplit(sensors$CPU_Time, "\\."))[,1]
###### join tables by time
x <- full_join(gps, sensors)
#### finishing touches
x <- x %>% select(GPS.Time,Y,X,Speed,Heading,Set_no,CPUDATEANDTIME,Date,Info2,Measure,Validity,X2,Info3) %>%
rename(GPSTIME = GPS.Time, GPSDATE = Date, LATITUDE =Y, LONGITUDE = X, VALIDITY = Validity, TRANSDUCERNAME = Info2,
SENSORNAME = Measure, SENSORVALUE = X2, HYDROPHONE = Info3, SET_NO = Set_no, SPEED = Speed, HEADING = Heading) %>%
mutate(ERRORCODE = NA, SIGNALSTRENGTH = NA, TRIP_ID = NA)
#x <- x %>% mutate(VALIDITY = ifelse(VALIDITY >=1000 & VALIDITY < 1010, "Raw", ifelse(VALIDITY >= 1010 & VALIDITY <= 1011,"Filtered",
#                                                                              ifelse(VALIDITY ==1001,"Rejected", VALIDITY))))
x <- x %>% mutate(LATITUDE = as.character(LATITUDE), LONGITUDE = as.character(LONGITUDE))
x <- x %>% mutate(GPSDATE =ifelse(GPSDATE %in% NA,as.character(date(as_datetime(CPUDATEANDTIME))),GPSDATE))
x <- x[c("CPUDATEANDTIME",
"GPSTIME",
"LATITUDE",
"LONGITUDE",
"SPEED",
"HEADING",
"VALIDITY",
"TRANSDUCERNAME",
"SENSORNAME",
"SENSORVALUE",
"ERRORCODE",
"HYDROPHONE",
"SIGNALSTRENGTH",
"SET_NO",
"TRIP_ID",
"GPSDATE")]
##### output is to survey/year/marport2esonar folder
out.dir = file.path(fpath,year,"marport2esonar")
dir.create(out.dir, recursive = TRUE, showWarnings = FALSE )
write.csv(x, file = file.path(out.dir,paste0(year,".csv")), row.names = F)
file.path(out.dir,paste0(year,".csv"))
marport2esonar(year=year)
?marport2esonar
require(bio.lobster)
lobster.db('port.redo')
install.packages('bio.lobster')
install.packages("bio.lobster")
require(bio.lobster)
lobster.db('port.redo')
install.packages('bio.lobster')
gi()
gi(local=F)
require(RODBC)
gi
require(bio.lobster)
lobster.db('port.redo')
View(con)
ports = connect.command(con,'select * from LOBSTER.port')
View(ports)
require(devtools)
require(DBI)
require(ROracle)
require(jsonlite)
require(opencpu)
install.packages(opencpu)
install.packages('opencpu')
require(opencpu)
setwd('C:/bio/bio.lobster')
require(devtools)
document()
